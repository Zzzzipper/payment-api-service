// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: proto/payment.proto

package payment

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{0}
}

type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{1}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{3}
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{4}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *PayRequest) Reset() {
	*x = PayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRequest) ProtoMessage() {}

func (x *PayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRequest.ProtoReflect.Descriptor instead.
func (*PayRequest) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{5}
}

func (x *PayRequest) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{6}
}

func (x *Payment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{7}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type KeyValueArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyValue []*KeyValue `protobuf:"bytes,1,rep,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
}

func (x *KeyValueArray) Reset() {
	*x = KeyValueArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueArray) ProtoMessage() {}

func (x *KeyValueArray) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueArray.ProtoReflect.Descriptor instead.
func (*KeyValueArray) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{8}
}

func (x *KeyValueArray) GetKeyValue() []*KeyValue {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

type BlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Card            *PayInfo       `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
	PaymentToken    *PaymentToken  `protobuf:"bytes,3,opt,name=payment_token,json=paymentToken,proto3" json:"payment_token,omitempty"`
	MerchantOrderId string         `protobuf:"bytes,4,opt,name=merchant_order_id,json=merchantOrderId,proto3" json:"merchant_order_id,omitempty"`
	Amount          uint32         `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Credential      *Credential    `protobuf:"bytes,6,opt,name=credential,proto3" json:"credential,omitempty"`
	CustomParamsRdy *KeyValueArray `protobuf:"bytes,7,opt,name=custom_params_rdy,json=customParamsRdy,proto3" json:"custom_params_rdy,omitempty"`
	Split           *Split         `protobuf:"bytes,8,opt,name=split,proto3" json:"split,omitempty"`
	PayoutInfo      *PayoutInfo    `protobuf:"bytes,9,opt,name=payout_info,json=payoutInfo,proto3" json:"payout_info,omitempty"`
}

func (x *BlockRequest) Reset() {
	*x = BlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRequest) ProtoMessage() {}

func (x *BlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRequest.ProtoReflect.Descriptor instead.
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{9}
}

func (x *BlockRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BlockRequest) GetCard() *PayInfo {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *BlockRequest) GetPaymentToken() *PaymentToken {
	if x != nil {
		return x.PaymentToken
	}
	return nil
}

func (x *BlockRequest) GetMerchantOrderId() string {
	if x != nil {
		return x.MerchantOrderId
	}
	return ""
}

func (x *BlockRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BlockRequest) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *BlockRequest) GetCustomParamsRdy() *KeyValueArray {
	if x != nil {
		return x.CustomParamsRdy
	}
	return nil
}

func (x *BlockRequest) GetSplit() *Split {
	if x != nil {
		return x.Split
	}
	return nil
}

func (x *BlockRequest) GetPayoutInfo() *PayoutInfo {
	if x != nil {
		return x.PayoutInfo
	}
	return nil
}

type PayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pan        string `protobuf:"bytes,1,opt,name=pan,proto3" json:"pan,omitempty"`
	Emonth     uint32 `protobuf:"varint,2,opt,name=emonth,proto3" json:"emonth,omitempty"`
	Eyear      uint32 `protobuf:"varint,3,opt,name=eyear,proto3" json:"eyear,omitempty"`
	Cvv        uint32 `protobuf:"varint,4,opt,name=cvv,proto3" json:"cvv,omitempty"`
	CardHolder string `protobuf:"bytes,5,opt,name=card_holder,json=cardHolder,proto3" json:"card_holder,omitempty"`
	Uid        string `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *PayInfo) Reset() {
	*x = PayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayInfo) ProtoMessage() {}

func (x *PayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayInfo.ProtoReflect.Descriptor instead.
func (*PayInfo) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{10}
}

func (x *PayInfo) GetPan() string {
	if x != nil {
		return x.Pan
	}
	return ""
}

func (x *PayInfo) GetEmonth() uint32 {
	if x != nil {
		return x.Emonth
	}
	return 0
}

func (x *PayInfo) GetEyear() uint32 {
	if x != nil {
		return x.Eyear
	}
	return 0
}

func (x *PayInfo) GetCvv() uint32 {
	if x != nil {
		return x.Cvv
	}
	return 0
}

func (x *PayInfo) GetCardHolder() string {
	if x != nil {
		return x.CardHolder
	}
	return ""
}

func (x *PayInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type PaymentToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PaymentToken) Reset() {
	*x = PaymentToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentToken) ProtoMessage() {}

func (x *PaymentToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentToken.ProtoReflect.Descriptor instead.
func (*PaymentToken) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{11}
}

func (x *PaymentToken) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PaymentToken) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login            string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	MerchantName     string `protobuf:"bytes,3,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	MerchantPassword string `protobuf:"bytes,4,opt,name=merchant_password,json=merchantPassword,proto3" json:"merchant_password,omitempty"`
	TerminalPassword string `protobuf:"bytes,5,opt,name=terminal_password,json=terminalPassword,proto3" json:"terminal_password,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{12}
}

func (x *Credential) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *Credential) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Credential) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *Credential) GetMerchantPassword() string {
	if x != nil {
		return x.MerchantPassword
	}
	return ""
}

func (x *Credential) GetTerminalPassword() string {
	if x != nil {
		return x.TerminalPassword
	}
	return ""
}

type Split struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplitTerminalId uint32 `protobuf:"varint,1,opt,name=split_terminal_id,json=splitTerminalId,proto3" json:"split_terminal_id,omitempty"`
	Amount          uint32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Purpose         string `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Fee             uint32 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *Split) Reset() {
	*x = Split{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Split) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Split) ProtoMessage() {}

func (x *Split) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Split.ProtoReflect.Descriptor instead.
func (*Split) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{13}
}

func (x *Split) GetSplitTerminalId() uint32 {
	if x != nil {
		return x.SplitTerminalId
	}
	return 0
}

func (x *Split) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Split) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *Split) GetFee() uint32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type PayoutInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pan string `protobuf:"bytes,1,opt,name=pan,proto3" json:"pan,omitempty"`
}

func (x *PayoutInfo) Reset() {
	*x = PayoutInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutInfo) ProtoMessage() {}

func (x *PayoutInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutInfo.ProtoReflect.Descriptor instead.
func (*PayoutInfo) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{14}
}

func (x *PayoutInfo) GetPan() string {
	if x != nil {
		return x.Pan
	}
	return ""
}

type BlockHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success            bool           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MerchantOrderId    string         `protobuf:"bytes,2,opt,name=merchant_order_id,json=merchantOrderId,proto3" json:"merchant_order_id,omitempty"`
	Amount             uint32         `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Autcode            string         `protobuf:"bytes,4,opt,name=autcode,proto3" json:"autcode,omitempty"`
	Errcode            string         `protobuf:"bytes,5,opt,name=errcode,proto3" json:"errcode,omitempty"`
	Errmessage         string         `protobuf:"bytes,6,opt,name=errmessage,proto3" json:"errmessage,omitempty"`
	AscUrl             string         `protobuf:"bytes,7,opt,name=ascUrl,proto3" json:"ascUrl,omitempty"`
	PaReq              string         `protobuf:"bytes,8,opt,name=paReq,proto3" json:"paReq,omitempty"`
	ThreeDSKey         string         `protobuf:"bytes,9,opt,name=threeDSKey,proto3" json:"threeDSKey,omitempty"`
	Rrn                string         `protobuf:"bytes,10,opt,name=rrn,proto3" json:"rrn,omitempty"`
	PanMask            string         `protobuf:"bytes,11,opt,name=panMask,proto3" json:"panMask,omitempty"`
	BankName           string         `protobuf:"bytes,12,opt,name=bankName,proto3" json:"bankName,omitempty"`
	ProcessingResponse string         `protobuf:"bytes,13,opt,name=processingResponse,proto3" json:"processingResponse,omitempty"`
	CustomParamsRdy    *KeyValueArray `protobuf:"bytes,14,opt,name=custom_params_rdy,json=customParamsRdy,proto3" json:"custom_params_rdy,omitempty"`
	FeePercent         uint32         `protobuf:"varint,15,opt,name=feePercent,proto3" json:"feePercent,omitempty"`
	TerminalId         uint32         `protobuf:"varint,16,opt,name=terminalId,proto3" json:"terminalId,omitempty"`
	SourceOffice       string         `protobuf:"bytes,17,opt,name=sourceOffice,proto3" json:"sourceOffice,omitempty"`
}

func (x *BlockHandler) Reset() {
	*x = BlockHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHandler) ProtoMessage() {}

func (x *BlockHandler) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHandler.ProtoReflect.Descriptor instead.
func (*BlockHandler) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{15}
}

func (x *BlockHandler) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BlockHandler) GetMerchantOrderId() string {
	if x != nil {
		return x.MerchantOrderId
	}
	return ""
}

func (x *BlockHandler) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BlockHandler) GetAutcode() string {
	if x != nil {
		return x.Autcode
	}
	return ""
}

func (x *BlockHandler) GetErrcode() string {
	if x != nil {
		return x.Errcode
	}
	return ""
}

func (x *BlockHandler) GetErrmessage() string {
	if x != nil {
		return x.Errmessage
	}
	return ""
}

func (x *BlockHandler) GetAscUrl() string {
	if x != nil {
		return x.AscUrl
	}
	return ""
}

func (x *BlockHandler) GetPaReq() string {
	if x != nil {
		return x.PaReq
	}
	return ""
}

func (x *BlockHandler) GetThreeDSKey() string {
	if x != nil {
		return x.ThreeDSKey
	}
	return ""
}

func (x *BlockHandler) GetRrn() string {
	if x != nil {
		return x.Rrn
	}
	return ""
}

func (x *BlockHandler) GetPanMask() string {
	if x != nil {
		return x.PanMask
	}
	return ""
}

func (x *BlockHandler) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *BlockHandler) GetProcessingResponse() string {
	if x != nil {
		return x.ProcessingResponse
	}
	return ""
}

func (x *BlockHandler) GetCustomParamsRdy() *KeyValueArray {
	if x != nil {
		return x.CustomParamsRdy
	}
	return nil
}

func (x *BlockHandler) GetFeePercent() uint32 {
	if x != nil {
		return x.FeePercent
	}
	return 0
}

func (x *BlockHandler) GetTerminalId() uint32 {
	if x != nil {
		return x.TerminalId
	}
	return 0
}

func (x *BlockHandler) GetSourceOffice() string {
	if x != nil {
		return x.SourceOffice
	}
	return ""
}

type ChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockHandler `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ChargeRequest) Reset() {
	*x = ChargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeRequest) ProtoMessage() {}

func (x *ChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeRequest.ProtoReflect.Descriptor instead.
func (*ChargeRequest) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{16}
}

func (x *ChargeRequest) GetBlock() *BlockHandler {
	if x != nil {
		return x.Block
	}
	return nil
}

type ChargeHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChargeHandler) Reset() {
	*x = ChargeHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeHandler) ProtoMessage() {}

func (x *ChargeHandler) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeHandler.ProtoReflect.Descriptor instead.
func (*ChargeHandler) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{17}
}

func (x *ChargeHandler) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PayoutRequest) Reset() {
	*x = PayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutRequest) ProtoMessage() {}

func (x *PayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutRequest.ProtoReflect.Descriptor instead.
func (*PayoutRequest) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{18}
}

type PayoutHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PayoutHandler) Reset() {
	*x = PayoutHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutHandler) ProtoMessage() {}

func (x *PayoutHandler) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutHandler.ProtoReflect.Descriptor instead.
func (*PayoutHandler) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{19}
}

func (x *PayoutHandler) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type VoidHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VoidHandler) Reset() {
	*x = VoidHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoidHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoidHandler) ProtoMessage() {}

func (x *VoidHandler) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoidHandler.ProtoReflect.Descriptor instead.
func (*VoidHandler) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{20}
}

func (x *VoidHandler) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RefundHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RefundHandler) Reset() {
	*x = RefundHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundHandler) ProtoMessage() {}

func (x *RefundHandler) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundHandler.ProtoReflect.Descriptor instead.
func (*RefundHandler) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{21}
}

func (x *RefundHandler) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OrderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *OrderStatus) Reset() {
	*x = OrderStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_payment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatus) ProtoMessage() {}

func (x *OrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatus.ProtoReflect.Descriptor instead.
func (*OrderStatus) Descriptor() ([]byte, []int) {
	return file_proto_payment_proto_rawDescGZIP(), []int{22}
}

func (x *OrderStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_proto_payment_proto protoreflect.FileDescriptor

var file_proto_payment_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x16, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x7b, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24,
	0x32, 0x19, 0xd0, 0x9a, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0,
	0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xa2, 0x02, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x10, 0xd0,
	0x97, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xa2,
	0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x6c, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x5b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0xd0, 0x9c, 0xd0,
	0xb0, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb2, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e,
	0xd1, 0x87, 0x2d, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb5, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf, 0x0d,
	0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xab,
	0x01, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x98, 0x01, 0x92,
	0x41, 0x94, 0x01, 0x32, 0x88, 0x01, 0xd0, 0x98, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82,
	0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80,
	0x20, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x86, 0xd0,
	0xb0, 0x2e, 0x20, 0xd0, 0x92, 0xd1, 0x8b, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0xd1,
	0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb8, 0x20, 0xd1, 0x82,
	0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe,
	0x2f, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20,
	0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xb0, 0xa2, 0x02,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x7c, 0x0a, 0x04,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x56, 0x92, 0x41,
	0x53, 0x32, 0x48, 0xd0, 0x94, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20,
	0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1,
	0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x88, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
	0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x6d, 0x0a, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x23, 0xd0,
	0xa2, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0x67, 0x70, 0x61, 0x79, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x79, 0x2f, 0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x70,
	0x61, 0x79, 0xa2, 0x02, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x32, 0x4c, 0xd0, 0x98, 0xd0, 0xb4,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0,
	0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0,
	0xb5, 0xd0, 0xb6, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1,
	0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0x20, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4,
	0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x86, 0xd0, 0xb0, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0xb3, 0x01, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x9a, 0x01, 0x92, 0x41, 0x96, 0x01, 0x32, 0x89, 0x01, 0xd0, 0xa1, 0xd1,
	0x83, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82,
	0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbf,
	0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x85, 0x20, 0x28, 0xd0, 0xb8, 0xd0, 0xbb,
	0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x8f, 0x20,
	0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd1, 0x86, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x82,
	0xd1, 0x8b, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
	0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0x29, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x42, 0x70, 0x92, 0x41, 0x6d, 0x32, 0x62, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1,
	0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb6, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0x20, 0xd0, 0xb4, 0xd0,
	0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xb0, 0x20, 0xd0, 0xb8, 0x20, 0xd0,
	0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0,
	0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1,
	0x80, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb5, 0xa2, 0x02, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0xd3, 0x01, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x5f, 0x72, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x42, 0x8e, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x32, 0x7f, 0xd0, 0xa1, 0xd0,
	0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbf,
	0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xbe, 0xd0, 0xbf,
	0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0x20,
	0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x27,
	0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0x20, 0x2d, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0,
	0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x27, 0xa2, 0x02, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x64, 0x79, 0x12, 0x87, 0x03, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0xe0, 0x02, 0x92, 0x41, 0xdc, 0x02, 0x32, 0xd0, 0x02,
	0xd0, 0x98, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd1, 0x83,
	0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20,
	0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xbc, 0xd1, 0x8b, 0x20,
	0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xb4,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0,
	0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbd,
	0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0,
	0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8,
	0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbb,
	0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x83, 0xd1, 0x8e, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd1,
	0x80, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0x20,
	0xd1, 0x81, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
	0xb3, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb8, 0x2e, 0x20, 0xd0,
	0x9e, 0xd0, 0xb1, 0xd1, 0x89, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd0, 0xbc,
	0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x85, 0x20, 0xd1, 0x81,
	0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85,
	0x20, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb9, 0x20, 0xd0, 0xb4,
	0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0,
	0xbe, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0xa2, 0x02, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x12, 0xbc, 0x01, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x85, 0x01, 0x92, 0x41,
	0x81, 0x01, 0x32, 0x76, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f,
	0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x81,
	0xd1, 0x82, 0xd0, 0xb2, 0x2c, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb0,
	0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0,
	0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0,
	0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0x43, 0x32, 0x43, 0xa2, 0x02, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x99, 0x06, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x03, 0x70,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x15, 0xd0,
	0x9d, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80,
	0xd1, 0x82, 0xd1, 0x8b, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x70,
	0x61, 0x6e, 0x12, 0x6b, 0x0a, 0x06, 0x65, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x53, 0x92, 0x41, 0x50, 0x32, 0x44, 0xd0, 0x9c, 0xd0, 0xb5, 0xd1, 0x81, 0xd1,
	0x8f, 0xd1, 0x86, 0x20, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0xd0,
	0xb0, 0x20, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb8,
	0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd1, 0x8b, 0xa2, 0x02, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x65, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x65, 0x0a, 0x05, 0x65, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4f,
	0x92, 0x41, 0x4c, 0x32, 0x40, 0xd0, 0x93, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd0, 0xb8, 0xd1, 0x81,
	0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd1,
	0x81, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xb9,
	0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
	0x80, 0xd1, 0x82, 0xd1, 0x8b, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x05, 0x65, 0x79, 0x65, 0x61, 0x72, 0x12, 0x66, 0x0a, 0x03, 0x63, 0x76, 0x76, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x54, 0x92, 0x41, 0x51, 0x32, 0x45, 0x43, 0x56, 0x43, 0x32, 0x2f, 0x43,
	0x56, 0x56, 0x32, 0x2e, 0x20, 0xd0, 0x9f, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0,
	0xb5, 0xd1, 0x82, 0xd1, 0x80, 0x20, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5,
	0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x86, 0xd0, 0xb8, 0xd0,
	0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xbc, 0xa2,
	0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x03, 0x63, 0x76, 0x76, 0x12, 0x65,
	0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x36, 0xd0, 0xa4, 0xd0, 0xb0, 0xd0, 0xbc,
	0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0xd0, 0xbc,
	0xd1, 0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb6, 0xd0, 0xb0, 0xd1, 0x82, 0xd0,
	0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd1, 0x8b,
	0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0xb3, 0x02, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xa0, 0x02, 0x92, 0x41, 0x9c, 0x02, 0x32, 0x90, 0x02, 0xd0, 0x98, 0xd0,
	0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,
	0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82,
	0xd1, 0x8b, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5,
	0xd0, 0xbc, 0xd0, 0xb5, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x41, 0x50, 0x20, 0xd0, 0xb8, 0xd0, 0xbb,
	0xd0, 0xb8, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb5, 0x20, 0xc2, 0xab, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0xc2, 0xbb, 0x2e, 0x20,
	0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd1, 0x83, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0,
	0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xc2, 0xab, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0xc2, 0xbb, 0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb1, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb0,
	0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd1,
	0x87, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0,
	0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0, 0xb8, 0xd0, 0xb7, 0x20, 0xd0, 0xbf, 0xd1, 0x80,
	0xd0, 0xb8, 0xd0, 0xb2, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b,
	0xd1, 0x85, 0x20, 0xd0, 0xba, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe,
	0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8e, 0xa2, 0x02, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32,
	0x13, 0xd0, 0xa2, 0xd0, 0xb8, 0xd0, 0xbf, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd0, 0xb0, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x19, 0xd0, 0x94, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd,
	0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb0, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xd3, 0x0a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0xac, 0x02, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x95, 0x02, 0x92, 0x41, 0x91, 0x02, 0x32, 0x85, 0x02, 0xd0, 0x9b, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0,
	0xb8, 0xd0, 0xbd, 0x20, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb6, 0xd0, 0xb0, 0xd1, 0x82,
	0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd1,
	0x8b, 0x2c, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1,
	0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0,
	0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0,
	0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0x20, 0xd0, 0x9f, 0xd1, 0x80,
	0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x86, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0x98,
	0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd1, 0x83, 0xd1, 0x8e,
	0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
	0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0,
	0xb0, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xba,
	0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x85, 0xd1,
	0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xba, 0x20, 0xd0,
	0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbd, 0xd0,
	0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7,
	0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8e, 0xa2, 0x02,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0xb4,
	0x02, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x97, 0x02, 0x92, 0x41, 0x93, 0x02, 0x32, 0x87, 0x02, 0xd0, 0x9f, 0xd0, 0xb0, 0xd1,
	0x80, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0x20, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb6,
	0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
	0x80, 0xd1, 0x82, 0xd1, 0x8b, 0x2c, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb5, 0xd0,
	0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xb2,
	0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0x20,
	0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x86, 0xd0, 0xb0,
	0x2e, 0x20, 0xd0, 0x98, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7,
	0xd1, 0x83, 0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
	0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xbb, 0xd1,
	0x83, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbb, 0xd0,
	0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0,
	0xbe, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20,
	0xd0, 0xba, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb5, 0xd1,
	0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb,
	0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb,
	0xd1, 0x8e, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xd6, 0x01, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb0, 0x01,
	0x92, 0x41, 0xac, 0x01, 0x32, 0xa0, 0x01, 0xd0, 0x9d, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0,
	0xb5, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20,
	0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x86, 0xd0, 0xb0,
	0x2e, 0x20, 0xd0, 0x98, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7,
	0xd1, 0x83, 0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
	0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xbb, 0xd1,
	0x83, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbb, 0xd0,
	0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0,
	0xbe, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20,
	0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd0, 0x9c, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x87, 0xd0, 0xb0, 0xd0,
	0xbd, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xff,
	0x01, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd1, 0x01, 0x92, 0x41, 0xcd,
	0x01, 0x32, 0xc1, 0x01, 0xd0, 0x9f, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c,
	0x20, 0xd0, 0x9c, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x82, 0xd0,
	0xb0, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0,
	0xb5, 0xd1, 0x80, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbe,
	0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb9, 0x2e, 0x20,
	0xd0, 0x98, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd1, 0x83,
	0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1,
	0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd1,
	0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20,
	0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd1,
	0x85, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb7,
	0xd0, 0xb0, 0x20, 0xd0, 0x9c, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1,
	0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x83, 0x02, 0x0a, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd5, 0x01, 0x92,
	0x41, 0xd1, 0x01, 0x32, 0xc5, 0x01, 0xd0, 0x9f, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbb,
	0xd1, 0x8c, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
	0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1,
	0x8f, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8,
	0xd0, 0xb9, 0x2e, 0x20, 0xd0, 0x98, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd0, 0xb7, 0xd1, 0x83, 0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x82, 0xd0,
	0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0,
	0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0,
	0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd1,
	0x81, 0xd0, 0xbe, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbc, 0xd0,
	0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbc, 0xa2, 0x02, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xd1, 0x02, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x12, 0x85, 0x01, 0x0a, 0x11, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x59, 0x92, 0x41,
	0x56, 0x32, 0x4a, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd1, 0x82,
	0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0,
	0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2,
	0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0,
	0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x1f, 0xd0,
	0xa1, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7,
	0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xa2, 0x02,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x10, 0xd0, 0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81,
	0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x1d, 0xd0, 0xa0,
	0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,
	0xbc, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0a, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x98, 0x01, 0x0a, 0x03, 0x70, 0x61,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x32, 0x76,
	0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
	0x80, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xb7, 0xd0,
	0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1,
	0x8f, 0x20, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2,
	0x2c, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5,
	0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
	0xb8, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8,
	0xd1, 0x8f, 0x20, 0x43, 0x32, 0x43, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x03, 0x70, 0x61, 0x6e, 0x22, 0xd6, 0x12, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x39, 0xd0, 0xa4, 0xd0,
	0xbb, 0xd0, 0xb0, 0xd0, 0xb3, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x88,
	0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0,
	0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x09, 0x74, 0x72, 0x75, 0x65,
	0x2f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xa2, 0x02, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x86, 0x01, 0x0a,
	0x11, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x32, 0x4c, 0xd0,
	0x98, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0,
	0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xb8,
	0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0x20, 0xd0, 0x9f, 0xd1, 0x80, 0xd0,
	0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x86, 0xd0, 0xb0, 0xa2, 0x02, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x75, 0x92, 0x41, 0x72, 0x32, 0x66, 0xd0, 0x97, 0xd0,
	0xb0, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd1, 0x83,
	0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0x9f, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5,
	0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x2c, 0x20, 0xd0, 0xb5,
	0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb2,
	0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3d, 0x74,
	0x72, 0x75, 0x65, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x1d, 0xd0, 0x9a, 0xd0,
	0xbe, 0xd0, 0xb4, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8,
	0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x61, 0x75, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x83, 0x01, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x69,
	0x92, 0x41, 0x66, 0x32, 0x5b, 0xd0, 0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xba,
	0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0x9f, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb0,
	0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbb,
	0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82,
	0xd0, 0xb5, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3d, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70, 0x32, 0x65, 0xd0, 0x9e,
	0xd0, 0xbf, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0x2e, 0x20, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0,
	0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
	0xbd, 0xd0, 0xbe, 0xd0, 0xb5, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0,
	0xba, 0xd0, 0xb8, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xe5, 0x01, 0x0a, 0x06, 0x61, 0x73, 0x63,
	0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xcc, 0x01, 0x92, 0x41, 0xc8, 0x01,
	0x32, 0xbc, 0x01, 0xd0, 0x90, 0xd0, 0xb4, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x81, 0x20, 0x28, 0x55,
	0x52, 0x4c, 0x2f, 0x55, 0x52, 0x49, 0x29, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2,
	0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x20, 0xd0, 0xb0, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x86, 0xd0,
	0xb8, 0xd0, 0xb8, 0x20, 0x33, 0x2d, 0x44, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x20,
	0xd0, 0x9e, 0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb,
	0xd0, 0xb5, 0xd0, 0xbd, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb2,
	0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20,
	0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3,
	0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0x33, 0x2d, 0x44, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x20,
	0xd0, 0xb8, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3d, 0x74, 0x72, 0x75, 0x65, 0xa2,
	0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x61, 0x73, 0x63, 0x55, 0x72, 0x6c,
	0x12, 0xd1, 0x01, 0x0a, 0x05, 0x70, 0x61, 0x52, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xba, 0x01, 0x92, 0x41, 0xb6, 0x01, 0x32, 0xaa, 0x01, 0xd0, 0x97, 0xd0, 0xb0, 0xd0, 0xbf,
	0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb0, 0xd1, 0x83,
	0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba,
	0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0x33, 0x2d, 0x44, 0x20, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x2e, 0x20, 0xd0, 0x9e, 0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1,
	0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0,
	0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0,
	0xb2, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
	0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0x33, 0x2d, 0x44, 0x20, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x20, 0xd0, 0xb8, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3d,
	0x74, 0x72, 0x75, 0x65, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x70,
	0x61, 0x52, 0x65, 0x71, 0x12, 0xe6, 0x01, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x44, 0x53,
	0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc5, 0x01, 0x92, 0x41, 0xc1, 0x01,
	0x32, 0xb5, 0x01, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1,
	0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe,
	0xd1, 0x80, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0,
	0xba, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0x9e, 0xd0, 0xb1, 0xd1, 0x8f, 0xd0,
	0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0x2c, 0x20, 0xd0,
	0xb5, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82,
	0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x87, 0xd0,
	0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85, 0xd0,
	0xbd, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0x33, 0x2d,
	0x44, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0xd0, 0xb8, 0x20, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x3d, 0x74, 0x72, 0x75, 0x65, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x44, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x03, 0x72, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32,
	0x14, 0x52, 0x52, 0x4e, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1,
	0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03,
	0x72, 0x72, 0x6e, 0x12, 0x7b, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x53, 0xd0, 0x9c, 0xd0, 0xb0, 0xd1,
	0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
	0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80,
	0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xb2, 0x20, 0xd1,
	0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x31, 0x32,
	0x33, 0x34, 0x35, 0x36, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33, 0x34, 0xa2, 0x02,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x61, 0x6e, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x5e, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x34, 0xd0, 0x9d, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xb5, 0x20, 0xd0, 0x91, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xba, 0xd0, 0xb0, 0x2d, 0xd1, 0x8d, 0xd0,
	0xbc, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb0, 0xa2, 0x02, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x72, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41,
	0x3f, 0x32, 0x34, 0xd0, 0x9e, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
	0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xbe, 0xd1, 0x82,
	0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0x20, 0xd1, 0x8d, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0,
	0xb9, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x64, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x32, 0x4f, 0xd0,
	0xa1, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd0, 0xb4, 0xd0, 0xbe,
	0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb,
	0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0,
	0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xbe,
	0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x64, 0x79, 0x12, 0x64, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x44, 0x92, 0x41,
	0x41, 0x32, 0x35, 0xd0, 0xa1, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xb0, 0x20,
	0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb8,
	0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd1, 0x8d, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb9,
	0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb3, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0xac,
	0x01, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x8b, 0x01, 0x92, 0x41, 0x87, 0x01, 0x32, 0x7b, 0x49, 0x44, 0x20, 0xd1,
	0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0,
	0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0,
	0xbc, 0xd0, 0xb5, 0x20, 0x4d, 0x41, 0x50, 0x2c, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd0, 0xba,
	0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd1,
	0x84, 0xd0, 0xb0, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd0,
	0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0,
	0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x7e, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x32, 0x4c, 0xd0, 0x98, 0xd0, 0xb4, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82,
	0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd1, 0x80,
	0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20,
	0xd0, 0xb2, 0x20, 0x47, 0x44, 0x53, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x22, 0x3c, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1f, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a,
	0x0d, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d,
	0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a,
	0x0d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x25,
	0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xe9, 0x08, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3e, 0x0a, 0x03, 0x41,
	0x50, 0x49, 0x12, 0x1a, 0x44, 0x6d, 0x73, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe,
	0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x1a, 0x1b,
	0x44, 0x6d, 0x73, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8,
	0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x2e, 0x12, 0x88, 0x01, 0x0a, 0x06,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x32, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x14, 0x44, 0x6d, 0x73, 0x20, 0xd1,
	0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x1a,
	0x15, 0x44, 0x6d, 0x73, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2e, 0x12, 0x82, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0e,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x14,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3c, 0x0a,
	0x03, 0x41, 0x50, 0x49, 0x12, 0x19, 0xd0, 0xa1, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x83,
	0xd1, 0x81, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0x1a,
	0x1a, 0xd0, 0xa1, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x81, 0x20, 0xd0, 0xb7,
	0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0x2e, 0x12, 0xa1, 0x01, 0x0a, 0x04,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x72, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x69,
	0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x58, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x27, 0xd0, 0x98,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb7,
	0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
	0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0x1a, 0x28, 0xd0, 0x98, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x86, 0xd0,
	0xb8, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1,
	0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0x2e, 0x12,
	0x67, 0x0a, 0x03, 0x50, 0x61, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x39, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x61, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x20, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x0b, 0x53,
	0x6d, 0x73, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0c, 0x53, 0x6d, 0x61, 0x20,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x84, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x2e, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x12, 0x4f, 0x63, 0x74, 0x20, 0xd0, 0xb2, 0xd1, 0x8b,
	0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x1a, 0x13, 0x4f, 0x63, 0x74, 0x20,
	0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x2e, 0x12,
	0x98, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4a,
	0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x20, 0xd0, 0x92, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb2, 0xd1,
	0x80, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0,
	0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x83, 0x1a, 0x21, 0xd0, 0x92, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0,
	0xb2, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd0, 0xb7, 0xd0,
	0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x83, 0x2e, 0x12, 0x84, 0x01, 0x0a, 0x04, 0x56,
	0x6f, 0x69, 0x64, 0x12, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x69, 0x64, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x3c, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x19, 0xd0, 0x9e, 0xd1, 0x82,
	0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
	0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0x1a, 0x1a, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0,
	0x2e, 0x42, 0x84, 0x01, 0x5a, 0x0e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x92, 0x41, 0x71, 0x12, 0x07, 0x32, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30,
	0x2a, 0x02, 0x01, 0x02, 0x72, 0x62, 0x0a, 0x1e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6d, 0x61, 0x70, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x6d, 0x61, 0x70, 0x2d,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x70, 0x69,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_payment_proto_rawDescOnce sync.Once
	file_proto_payment_proto_rawDescData = file_proto_payment_proto_rawDesc
)

func file_proto_payment_proto_rawDescGZIP() []byte {
	file_proto_payment_proto_rawDescOnce.Do(func() {
		file_proto_payment_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_payment_proto_rawDescData)
	})
	return file_proto_payment_proto_rawDescData
}

var file_proto_payment_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_payment_proto_goTypes = []interface{}{
	(*AddUserRequest)(nil),   // 0: payment.AddUserRequest
	(*ListUsersRequest)(nil), // 1: payment.ListUsersRequest
	(*User)(nil),             // 2: payment.User
	(*OrderRequest)(nil),     // 3: payment.OrderRequest
	(*Order)(nil),            // 4: payment.Order
	(*PayRequest)(nil),       // 5: payment.PayRequest
	(*Payment)(nil),          // 6: payment.Payment
	(*KeyValue)(nil),         // 7: payment.KeyValue
	(*KeyValueArray)(nil),    // 8: payment.KeyValueArray
	(*BlockRequest)(nil),     // 9: payment.BlockRequest
	(*PayInfo)(nil),          // 10: payment.PayInfo
	(*PaymentToken)(nil),     // 11: payment.PaymentToken
	(*Credential)(nil),       // 12: payment.Credential
	(*Split)(nil),            // 13: payment.Split
	(*PayoutInfo)(nil),       // 14: payment.PayoutInfo
	(*BlockHandler)(nil),     // 15: payment.BlockHandler
	(*ChargeRequest)(nil),    // 16: payment.ChargeRequest
	(*ChargeHandler)(nil),    // 17: payment.ChargeHandler
	(*PayoutRequest)(nil),    // 18: payment.PayoutRequest
	(*PayoutHandler)(nil),    // 19: payment.PayoutHandler
	(*VoidHandler)(nil),      // 20: payment.VoidHandler
	(*RefundHandler)(nil),    // 21: payment.RefundHandler
	(*OrderStatus)(nil),      // 22: payment.OrderStatus
}
var file_proto_payment_proto_depIdxs = []int32{
	4,  // 0: payment.PayRequest.order:type_name -> payment.Order
	7,  // 1: payment.KeyValueArray.key_value:type_name -> payment.KeyValue
	10, // 2: payment.BlockRequest.card:type_name -> payment.PayInfo
	11, // 3: payment.BlockRequest.payment_token:type_name -> payment.PaymentToken
	12, // 4: payment.BlockRequest.credential:type_name -> payment.Credential
	8,  // 5: payment.BlockRequest.custom_params_rdy:type_name -> payment.KeyValueArray
	13, // 6: payment.BlockRequest.split:type_name -> payment.Split
	14, // 7: payment.BlockRequest.payout_info:type_name -> payment.PayoutInfo
	8,  // 8: payment.BlockHandler.custom_params_rdy:type_name -> payment.KeyValueArray
	15, // 9: payment.ChargeRequest.block:type_name -> payment.BlockHandler
	9,  // 10: payment.PaymentService.Block:input_type -> payment.BlockRequest
	16, // 11: payment.PaymentService.Charge:input_type -> payment.ChargeRequest
	4,  // 12: payment.PaymentService.Get:input_type -> payment.Order
	3,  // 13: payment.PaymentService.Init:input_type -> payment.OrderRequest
	5,  // 14: payment.PaymentService.Pay:input_type -> payment.PayRequest
	18, // 15: payment.PaymentService.Payout:input_type -> payment.PayoutRequest
	4,  // 16: payment.PaymentService.Refund:input_type -> payment.Order
	4,  // 17: payment.PaymentService.Void:input_type -> payment.Order
	15, // 18: payment.PaymentService.Block:output_type -> payment.BlockHandler
	17, // 19: payment.PaymentService.Charge:output_type -> payment.ChargeHandler
	22, // 20: payment.PaymentService.Get:output_type -> payment.OrderStatus
	4,  // 21: payment.PaymentService.Init:output_type -> payment.Order
	6,  // 22: payment.PaymentService.Pay:output_type -> payment.Payment
	19, // 23: payment.PaymentService.Payout:output_type -> payment.PayoutHandler
	21, // 24: payment.PaymentService.Refund:output_type -> payment.RefundHandler
	20, // 25: payment.PaymentService.Void:output_type -> payment.VoidHandler
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_payment_proto_init() }
func file_proto_payment_proto_init() {
	if File_proto_payment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_payment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Split); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoidHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_payment_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_payment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_payment_proto_goTypes,
		DependencyIndexes: file_proto_payment_proto_depIdxs,
		MessageInfos:      file_proto_payment_proto_msgTypes,
	}.Build()
	File_proto_payment_proto = out.File
	file_proto_payment_proto_rawDesc = nil
	file_proto_payment_proto_goTypes = nil
	file_proto_payment_proto_depIdxs = nil
}
